use crate::lexer;
use crate::ast::ASTNode;
use lalrpop_util::ErrorRecovery;

grammar<'input>(errors: &mut Vec<ErrorRecovery<lexer::Location, lexer::Token<'input>, lexer::LexicalError>>);

// High-level Definitions 

pub Program: ASTNode<'input> = <ExtDefList> EOI => ASTNode::node("Program", vec![<>]);

ExtDefList: ASTNode<'input> = {
    ExtDef ExtDefList => ASTNode::node("ExtDefList", vec![<>]),
        => ASTNode::empty(),
};

ExtDef: ASTNode<'input> = {
    Specifier ExtDecList SEMI => ASTNode::node("ExtDef", vec![<>]),
    Specifier SEMI => ASTNode::node("ExtDef", vec![<>]),
    Specifier FunDec CompSt => ASTNode::node("ExtDef", vec![<>]),
};

ExtDecList: ASTNode<'input> = {
    VarDec => ASTNode::node("ExtDecList", vec![<>]),
    VarDec COMMA ExtDecList => ASTNode::node("ExtDecList", vec![<>]),
};

// Specifiers 

Specifier: ASTNode<'input> = {
    TYPE            => ASTNode::node("Specifier", vec![<>]),
    StructSpecifier => ASTNode::node("Specifier", vec![<>]),
};

StructSpecifier: ASTNode<'input> = {
    STRUCT OptTag LC DefList RC => ASTNode::node("StructSpecifier", vec![<>]),
    STRUCT Tag                  => ASTNode::node("StructSpecifier", vec![<>]),
};

OptTag: ASTNode<'input> = {
    ID => ASTNode::node("OptTag", vec![<>]),
        => ASTNode::empty(),
};

Tag: ASTNode<'input> = ID => ASTNode::node("Tag", vec![<>]);

//  Declarators 

VarDec: ASTNode<'input> = {
    ID                => ASTNode::node("VarDec", vec![<>]),
    VarDec LB INT RB  => ASTNode::node("VarDec", vec![<>]),
};

FunDec: ASTNode<'input> = {
    ID LP VarList RP  => ASTNode::node("FunDec", vec![<>]),
    ID LP RP          => ASTNode::node("FunDec", vec![<>]),
};

VarList: ASTNode<'input> = {
    ParamDec COMMA VarList => ASTNode::node("VarList", vec![<>]),
    ParamDec               => ASTNode::node("VarList", vec![<>]),
};

ParamDec: ASTNode<'input> = Specifier VarDec => ASTNode::node("ParamDec", vec![<>]);

//  Statements 

CompSt: ASTNode<'input> = LC DefList StmtList RC => ASTNode::node("CompSt", vec![<>]);

StmtList: ASTNode<'input> = {
    Stmt StmtList => ASTNode::node("StmtList", vec![<>]),
                           => ASTNode::empty(),
}

Stmt = { MatchedStmt, OpenStmt };

MatchedStmt: ASTNode<'input> = {
    Exp SEMI                                  => ASTNode::node("Stmt", vec![<>]),
    CompSt                                    => ASTNode::node("Stmt", vec![<>]),
    RETURN Exp SEMI                           => ASTNode::node("Stmt", vec![<>]),
    WHILE LP Exp RP MatchedStmt               => ASTNode::node("Stmt", vec![<>]),
    IF LP Exp RP MatchedStmt ELSE MatchedStmt => ASTNode::node("Stmt", vec![<>]),
    IF LP Exp RP <!> ELSE MatchedStmt => {
        errors.push(<>);
        ASTNode::node("ErrorStmt", vec![])
    },
};

OpenStmt: ASTNode<'input> = {
    WHILE LP Exp RP OpenStmt               => ASTNode::node("Stmt", vec![<>]),
    IF LP Exp RP Stmt                      => ASTNode::node("Stmt", vec![<>]),
    IF LP Exp RP MatchedStmt ELSE OpenStmt => ASTNode::node("Stmt", vec![<>]),
    IF LP Exp RP <!> ELSE OpenStmt => {
        errors.push(<>);
        ASTNode::node("ErrorStmt", vec![])
    },
}

// Stmt: ASTNode<'input> = {
//     Exp SEMI                        => ASTNode::node("Stmt", vec![<>]),
//     CompSt                          => ASTNode::node("Stmt", vec![<>]),
//     RETURN Exp SEMI                 => ASTNode::node("Stmt", vec![<>]),
//     IF LP Exp RP Stmt ELSE Stmt     => ASTNode::node("Stmt", vec![<>]),
//     IF LP Exp RP Stmt               => ASTNode::node("Stmt", vec![<>]),
//     WHILE LP Exp RP Stmt            => ASTNode::node("Stmt", vec![<>]),
// };

// Local Definitions 

DefList: ASTNode<'input> = {
    Def DefList => ASTNode::node("DefList", vec![<>]),
                         => ASTNode::empty(),
};

Def: ASTNode<'input> = {
    Specifier DecList SEMI => ASTNode::node("Def", vec![<>]),
    Specifier <!> SEMI => {
        errors.push(<>);
        ASTNode::node("ErrorDef", vec![])
    },
};

DecList: ASTNode<'input> = {
    Dec                      => ASTNode::node("DecList", vec![<>]),
    Dec COMMA DecList        => ASTNode::node("DecList", vec![<>]),
}

Dec: ASTNode<'input> = {
    VarDec                   => ASTNode::node("Dec", vec![<>]),
    VarDec ASSIGNOP Exp      => ASTNode::node("Dec", vec![<>]),
}

// Expressions 

// Exp  =  { MINUS ~ Exp
//         | NOT ~ Exp
//         | LP ~ Exp ~ RP
//         | ID ~ LP ~ Args? ~ RP
//         | ID
//         | FLOAT
//         | INT
//         | Exp ~ ASSIGNOP ~ Exp
//         | Exp ~ AND ~ Exp
//         | Exp ~ OR ~ Exp
//         | Exp ~ RELOP ~ Exp
//         | Exp ~ PLUS ~ Exp
//         | Exp ~ MINUS ~ Exp
//         | Exp ~ STAR ~ Exp
//         | Exp ~ DIV ~ Exp
//         | Exp ~ LB ~ Exp ~ RB
//         | Exp ~ DOT ~ ID
//         }

Exp: ASTNode<'input> = { 
    LogicOrExp ASSIGNOP Exp => ASTNode::node("Exp", vec![<>]),
    LogicOrExp              => ASTNode::node("Exp", vec![<>]),
};

LogicOrExp: ASTNode<'input> = { 
    LogicOrExp OR LogicAndExp => ASTNode::node("Exp", vec![<>]),
    LogicAndExp => ASTNode::node("Exp", vec![<>]),
};

LogicAndExp: ASTNode<'input> = { 
    LogicAndExp AND RelExp => ASTNode::node("Exp", vec![<>]),
    RelExp => ASTNode::node("Exp", vec![<>]),
};

RelExp: ASTNode<'input> = { 
    RelExp RELOP ArithExp => ASTNode::node("Exp", vec![<>]),
    ArithExp => ASTNode::node("Exp", vec![<>]),
};

ArithExp: ASTNode<'input> = { 
    ArithExp ArithOp TermExp => ASTNode::node("Exp", vec![<>]),
    TermExp => ASTNode::node("Exp", vec![<>]),
};

ArithOp = { PLUS, MINUS };

TermExp: ASTNode<'input> = { 
    TermExp TermOp FactorExp => ASTNode::node("Exp", vec![<>]),
    FactorExp => ASTNode::node("Exp", vec![<>]),
};

TermOp = { STAR, DIV };

FactorExp: ASTNode<'input> = {
    MINUS FactorExp => ASTNode::node("Exp", vec![<>]),
    NOT FactorExp   => ASTNode::node("Exp", vec![<>]),
    AtomExp         => ASTNode::node("Exp", vec![<>]),
};

AtomExp: ASTNode<'input> = {
    Atom,
    AtomExp LP RP      => ASTNode::node("Exp", vec![<>]),
    AtomExp LP Args RP => ASTNode::node("Exp", vec![<>]),
    AtomExp LP <!>  RP => {
        errors.push(<>);
        ASTNode::node("ErrorAtomExp", vec![])
    },
    AtomExp LB Exp RB  => ASTNode::node("Exp", vec![<>]),
    AtomExp LB <!> RB => {
        errors.push(<>);
        ASTNode::node("ErrorAtomExp", vec![])
    },
    AtomExp DOT ID     => ASTNode::node("Exp", vec![<>]),
};

Atom: ASTNode<'input> = {
    ID             => ASTNode::node("Exp", vec![<>]),
    INT            => ASTNode::node("Exp", vec![<>]),
    FLOAT          => ASTNode::node("Exp", vec![<>]),
    LP Exp RP      => ASTNode::node("Exp", vec![<>]),
}

Args: ASTNode<'input> = {
    Exp COMMA Args => ASTNode::node("Args", vec![<>]),
    Exp            => ASTNode::node("Args", vec![<>]),
};


// Tokens 

SEMI: ASTNode<'input> = <loc:@L> ";" => ASTNode::keyword(lexer::Token::SEMI, loc);

COMMA: ASTNode<'input> = <loc:@L> "," => ASTNode::keyword(lexer::Token::COMMA, loc);

ASSIGNOP: ASTNode<'input> = <loc:@L> "=" => ASTNode::keyword(lexer::Token::ASSIGNOP, loc);

RELOP: ASTNode<'input> = <loc:@L> <relop:RelopToken> => ASTNode::relop(relop, loc);

PLUS: ASTNode<'input> = <loc:@L> "+" => ASTNode::keyword(lexer::Token::PLUS, loc);

MINUS: ASTNode<'input> = <loc:@L> "-" => ASTNode::keyword(lexer::Token::MINUS, loc);

STAR: ASTNode<'input> = <loc:@L> "*" => ASTNode::keyword(lexer::Token::STAR, loc);

DIV: ASTNode<'input> = <loc:@L> "/" => ASTNode::keyword(lexer::Token::DIV, loc);

AND: ASTNode<'input> = <loc:@L> "&&" => ASTNode::keyword(lexer::Token::AND, loc);

OR: ASTNode<'input> = <loc:@L> "||" => ASTNode::keyword(lexer::Token::OR, loc);

DOT: ASTNode<'input> = <loc:@L> "." => ASTNode::keyword(lexer::Token::DOT, loc);

NOT: ASTNode<'input> = <loc:@L> "!" => ASTNode::keyword(lexer::Token::NOT, loc);

LP: ASTNode<'input> = <loc:@L> "(" => ASTNode::keyword(lexer::Token::LP, loc);

RP: ASTNode<'input> = <loc:@L> ")" => ASTNode::keyword(lexer::Token::RP, loc);

LB: ASTNode<'input> = <loc:@L> "[" => ASTNode::keyword(lexer::Token::LB, loc);

RB: ASTNode<'input> = <loc:@L> "]" => ASTNode::keyword(lexer::Token::RB, loc);

LC: ASTNode<'input> = <loc:@L> "{" => ASTNode::keyword(lexer::Token::LC, loc);

RC: ASTNode<'input> = <loc:@L> "}" => ASTNode::keyword(lexer::Token::RC, loc);

STRUCT: ASTNode<'input> = <loc:@L> "struct" => ASTNode::keyword(lexer::Token::STRUCT, loc);

RETURN: ASTNode<'input> = <loc:@L> "return" => ASTNode::keyword(lexer::Token::RETURN, loc);

IF: ASTNode<'input> = <loc:@L> "if" => ASTNode::keyword(lexer::Token::IF, loc);

ELSE: ASTNode<'input> = <loc:@L> "else" => ASTNode::keyword(lexer::Token::ELSE, loc);

WHILE: ASTNode<'input> = <loc:@L> "while" => ASTNode::keyword(lexer::Token::WHILE, loc);

TYPE: ASTNode<'input> = <loc:@L> <tt:TypeToken> => ASTNode::type_name(tt, loc);

ID: ASTNode<'input> = <loc:@L> <id:IdToken> => ASTNode::ident(id, loc);

INT: ASTNode<'input> = <loc:@L> <val:IntLit> => ASTNode::int(val, loc);

FLOAT: ASTNode<'input> = <loc:@L> <val:FloatLit> => ASTNode::float(val, loc);

extern {
    type Location = lexer::Location;
    type Error = lexer::LexicalError;
    
    enum lexer::Token<'input> {
        ";" => lexer::Token::SEMI,
        "," => lexer::Token::COMMA,
        "=" => lexer::Token::ASSIGNOP,
        RelopToken => lexer::Token::RELOP(<&'input str>),
        "+" => lexer::Token::PLUS,
        "-" => lexer::Token::MINUS,
        "*" => lexer::Token::STAR,
        "/" => lexer::Token::DIV,
        "&&" => lexer::Token::AND,
        "||" => lexer::Token::OR,
        "." => lexer::Token::DOT,
        "!" => lexer::Token::NOT,
        TypeToken => lexer::Token::TYPE(<&'input str>),
        "(" => lexer::Token::LP,
        ")" => lexer::Token::RP,
        "[" => lexer::Token::LB,
        "]" => lexer::Token::RB,
        "{" => lexer::Token::LC,
        "}" => lexer::Token::RC,
        "struct" => lexer::Token::STRUCT,
        "return" => lexer::Token::RETURN,
        "if" => lexer::Token::IF,
        "else" => lexer::Token::ELSE,
        "while" => lexer::Token::WHILE,
        IdToken => lexer::Token::ID(<&'input str>),
        IntLit => lexer::Token::INT(<i32>),
        FloatLit => lexer::Token::FLOAT(<f32>),
        EOI => lexer::Token::EOI,
        UnknownChar => lexer::Token::UnknownChar(<char>),
        IllegalOct => lexer::Token::IllegalOct(<&'input str>),
        IllegalHex => lexer::Token::IllegalHex(<&'input str>),
    }
}
